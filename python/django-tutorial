Verify if Django installed:
python3 -m django --version

Creating a project
django-admin startproject mysite

The development server (127.0.0.1:8000)
python3 manage.py runserver

  - Changing the IP adrress and port port
  python3 manage.py runserver 1.2.3.4:8080
  
The development server automatically reloads Python code for each request as needed.
However, some actions like adding files don’t trigger a restart, so you’ll have to restart the server in these cases.

Creating the Polls app
python3 manage.py startapp polls

Write your first view
polls/views.py
def index(request: HttpRequest) -> HttpResponse:
    return HttpResponse("Hello, world. You're at the polls index.")
    
To call the view, we need to map it to a URL - and for this we need a URLconf.
polls/urls.py
urlpatterns = [
    path('', views.index, name='index'),
]

The next step is to point the root URLconf at the polls.urls module.
In mysite/urls.py, add an import for django.urls.include and insert an include() in the urlpatterns list.
urlpatterns = [
    path('polls/', include('polls.urls')),
    path('admin/', admin.site.urls),
]

The include() function allows referencing other URLconfs.
You should always use include() when you include other URL patterns. admin.site.urls is the only exception to this.

The path() function is passed four arguments, two required: route and view, and two optional: kwargs, and name.
At this point, it’s worth reviewing what these arguments are for.
route - When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, comparing the requested URL against each pattern until it finds one that matches.
view - When Django finds a matching pattern, it calls the specified view function with an HttpRequest object as the first argument and any “captured” values from the route as keyword arguments.
kwargs - Arbitrary keyword arguments can be passed in a dictionary to the target view.
name - Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates.

Database setup
add pg_config to $PATH
install psycopg2: pip3 install psycopg2

 mysite/settings.py
 DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': '#TODO#',
        'PASSWORD': '#TODO#',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

python3 manage.py migrate
The migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file and the database migrations shipped with the app

Creating models
polls/models.py

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    
Here, each model is represented by a class that subclasses django.db.models.Model. Each model has a number of class variables, each of which represents a database field in the model.

Activating models
we need to tell our project that the polls app is installed.
mysite/settings.py
INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

python3 manage.py makemigrations polls
By running makemigrations, you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and that you’d like the changes to be stored as a migration.
polls/migrations/0001_initial.py

python3 manage.py sqlmigrate polls 0001
The sqlmigrate command takes migration names and returns their SQL.
The sqlmigrate command doesn’t actually run the migration on your database - instead, it prints it to the screen so that you can see what SQL Django thinks is required

If you’re interested, you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.
  
run migrate again to create those model tables in your database
python3 manage.py migrate

The migrate command takes all the migrations that haven’t been applied (Django tracks which ones are applied using a special table in your database called django_migrations) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.

three-step guide to making model changes:
Change your models (in models.py).
Run python3 manage.py makemigrations to create migrations for those changes
Run python3 manage.py migrate to apply those changes to the database.

Playting with the API

python3 manage.py shell

Introducing the Django Admin
